U8 puts(U8* str) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %dt"
".nat:"
    "cmp *%dt $00"
    "re"
    "push *%dt"
    "int $02"
    "inx %dt"
    "jmp .nat"
;

U8 retrn(U8 code) =
    "int $00"
;

U8 strcpy(U8* src, U8* dst) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %ac"
    "lh %dc %bs"
    "ldt *%ac"
    "ldi %bs"
    "cmp %dt $00"
    "re"
    "stgrb %dt"
    "inx %ac"
    "inx %bs"
    "jmp strcpy"
;

U8 strnul(U8* str) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %ac"
    "cmp *%ac $00"
    "jme .nul"
    "lda $01"
    "ret"
".nul:"
    "lda $00"
    "ret"
;


U8 itoa(U8 num) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %ac"
    "ldi itoa_buf"
    "add %di $04"
".loop:"
    "div %ac 10"
    "add %dc 48"
    "ldt %di"
    "storb %dc"
    "dex %di"
    "cmp %ac $00"
    "jmne .loop"
    "ret"
"itoa_buf: reserve 5 bytes"
"itoa_clr:"
    "ldc $4"
    "ldd $00"
    "ldt itoa_buf"
".loop:"
    "storb %dc"
    "inx %dt"
    "loop .loop"
    "ret"
;

U8 strtok(U8* buf, U8 end) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %dt"
    "lh %dc %bs"
    "inx %dt"
    "ldc *%dt"
    "sub %cn %bs"
    "loop strtok"
    "ret"
;

U8 write(U8* buf, U8 chars) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %dt"
    "lh %dc %cn"
    "ldd $00"
    "sub %cn $01"
".loop:"
    "psh *%dt"
    "int $02"
    "inx %dt"
    "loop .loop"
    "ret"
;

U8 strcmp(U8* str1, U8* str2) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %dt"
    "lh %dc %di"
".loop:"
    "lda *%dt"
    "ldb *%di"
    "cmp %ac %bs"
    "jmne .fail"
    "cmp %bs 0"
    "jme .ok"
    "inx %dt"
    "inx %di"
    "jmp .loop"
".fail:"
    "mov %ac 0"
    "ret"
".ok:"
    "mov %ac 1"
    "ret"
;

U8 gets(U8* buf) =
    "mov %dc %sp"
    "add %dc 4"
    "lh %dc %dt"
    "mov %di %dt"
".loop:"
    "int 1"
    "pop %ac"
    "cmp %ac $1B"
    "jme .esc"
    "cmp %ac 8"
    "jme .bs"
    "cmp %ac 127"
    "jme .bs"
    "psh %ac"
    "int 2"
    "cmp %ac 10"
    "jme .end"
    "storb %ac"
    "inx %dt"
    "jmp .loop"
".esc:"
    "lda 94"
    "psh %ac"
    "int 2"
    "storb %ac"
    "inx %dt"
    "lda '['"
    "psh %ac"
    "int 2"
    "storb %ac"
    "inx %dt"
"jmp .loop"
".bs:"
    "cmp %dt %di"
    "jme .loop"
    "lda 0"
    "storb %ac"
    "dex %dt"
    "lda *%dt"
    "div %ac 64"
    "cmp %ac 2"
    "jme .bs"
    "psh 8"
    "int $2"
    "psh 32"
    "int $2"
    "psh 8"
    "int $2"
    "jmp .loop"
".end:"
    "lda 0"
    "storb %ac"
    "ret"
;
